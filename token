// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract Token is ERC20, Ownable {
    constructor(
        string memory _tokenName,
        string memory _tokenSymbol,
        uint256 initialSupply,
        address initialOwner
    ) ERC20(_tokenName, _tokenSymbol) Ownable(initialOwner) {
        _mint(msg.sender, initialSupply);
    }

    function mintTokens(address receiverAddress, uint256 amountToMint) external onlyOwner {
        require(receiverAddress != address(0), "Token: receiver cannot be zero address");
        require(amountToMint > 0, "Token: amount to mint must be greater than zero");
        _mint(receiverAddress, amountToMint);
    }

    function burnTokens(uint256 amountToBurn) external {
        require(amountToBurn > 0, "Token: amount to burn must be greater than zero");
        require(balanceOf(msg.sender) >= amountToBurn, "Token: insufficient balance to burn");
        _burn(msg.sender, amountToBurn);
    }

    function transferTokens(address recipientAddress, uint256 amountToTransfer) external returns (bool) {
        require(recipientAddress != address(0), "Token: recipient cannot be zero address");
        require(amountToTransfer > 0, "Token: amount to transfer must be greater than zero");
        require(balanceOf(msg.sender) >= amountToTransfer, "CustomToken: insufficient balance to transfer");
        _transfer(msg.sender, recipientAddress, amountToTransfer);
        return true;
    }
}
